1.What is oops in python
OOPs, or Object-Oriented Programming (OOP) in Python, is a programming paradigm that organizes software design around data, or objects, rather than functions and logic. An object can be defined as a data field with unique attributes and behavior.

2.Key Concepts in oop 
	1.Class
	2.Object
	3.Inheritance
	4.Encapsulation
	5.Polymorphism
	6.Abstraction

3.What is class in oop
Class is a blueprint for creating objects. It defines a set of attributes and methods.
 that the objects created from the class will have
class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
    
    def start_engine(self):
        print(f"{self.make} {self.model}'s engine started.")

4.What is object in oop
object is an instance of a class. When a class is defined, no memory is allocated until an object of that class is created.
my_car = Car("Toyota", "Corolla", 2022)
my_car.start_engine()

5.What is inheritance in oop
A way to form new classes using classes that have already been defined. The new classes, known as derived classes (or child classes), inherit attributes and methods of the base class (or parent class).
class ElectricCar(Car):
    def __init__(self, make, model, year, battery_size):
        super().__init__(make, model, year)
        self.battery_size = battery_size
    
    def describe_battery(self):
        print(f"This car has a {self.battery_size}-kWh battery.")

6.What is encapsulation in oop
The bundling of data (attributes) and methods that operate on the data within one unit, such as a class. It also restricts direct access to some of an objectâ€™s components, which is a way of preventing unintended interference and misuse.
class Person:
    def __init__(self, name, age):
        self.__name = name  # private attribute
        self.__age = age  # private attribute

    def get_info(self):
        return f"Name: {self.__name}, Age: {self.__age}"

7.What is polymorphism in oop
The ability to use a common interface for multiple forms (data types). It means that the same function name can be used for different types.
class Dog:
    def speak(self):
        return "Woof!"

class Cat:
    def speak(self):
        return "Meow!"

def animal_sound(animal):
    print(animal.speak())

dog = Dog()
cat = Cat()

animal_sound(dog)
animal_sound(cat)

8.What is abstraction in oop
The concept of hiding the complex reality while exposing only the necessary parts. It allows you to focus on interactions at a higher level.
from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

9.Uses of oop
Object-Oriented Programming (OOP) is widely used in software development due to its versatility and ability to handle complex problems. Here are some of the key uses and advantages of OOP:
Modularity and Code Reusability
Improved Code Maintenance
Data Security and Encapsulation
Inheritance for Code Reuse and Extension
Polymorphism for Flexibility and Extensibility
Abstraction for Simplified Interfaces
Problem Solving in Real-World Scenarios
Design Patterns and Software Architecture
Graphical User Interfaces (GUIs)
Large-Scale Software Development

10.Benifits of OOP
Modularity: Each object forms a separate entity, making code easier to troubleshoot.
Reusability: Objects can be reused in different programs.
Scalability: OOP helps in managing and maintaining larger software.
Data Hiding: Internal object details are hidden from the outside.
OOP is a powerful tool in Python that helps developers write clean, efficient, and reusable code.




































